# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

name: "Production"

on:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches:
      - master
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Set environment variables for steps
    env:
      SUB: ${{ secrets.SUB }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      TENANT_ID: ${{ secrets.TENANT_ID }}
      PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}

    # Checkout the repository to the GitHub Actions runner
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1

      - name: Check Terraform version
        run: terraform version
        id: version

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STORAGE_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.TF_STORAGE_CONTAINER_NAME }}" \
          -backend-config="key=${{ secrets.TF_STORAGE_KEY }}" \
          -backend-config="access_key=${{ secrets.TF_STORAGE_ACCESS_KEY }}"
        working-directory: ./env/base-cluster

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan \
          -var="sub=$SUB" \
          -var="client_id=$CLIENT_ID" \
          -var="client_secret=$CLIENT_SECRET" \
          -var="tenant_id=$TENANT_ID" \
          -var="public_key=$PUBLIC_KEY"
        working-directory: ./env/base-cluster
        continue-on-error: true

        # Write output to PR
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

        # On push to master, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply \
          -auto-approve \
          -var="sub=$SUB" \
          -var="client_id=$CLIENT_ID" \
          -var="client_secret=$CLIENT_SECRET" \
          -var="tenant_id=$TENANT_ID" \
          -var="public_key=$PUBLIC_KEY"
        working-directory: ./env/base-cluster

  docker:
    needs: terraform
    runs-on: ubuntu-latest
    name: "Docker"

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Build image"
        uses: azure/docker-login@v1
      - run: |
          docker build ./spark/ -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/spark-on-aks:${{ github.sha }} -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/spark-on-aks:stable
