# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

name: "Production"

on:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches:
      - master
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Set environment variables for steps
    env:
      SUB: ${{ secrets.SUB }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      TENANT_ID: ${{ secrets.TENANT_ID }}
      PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}

    # Checkout the repository to the GitHub Actions runner
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Check Terraform version
        run: terraform version
        id: version

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="resource_group_name=${{ secrets.TF_STORAGE_RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.TF_STORAGE_CONTAINER_NAME }}" -backend-config="key=${{ secrets.TF_STORAGE_KEY }}" -backend-config="access_key=${{ secrets.TF_STORAGE_ACCESS_KEY }}"
        working-directory: ./env/base-cluster

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -var="sub=$SUB" -var="client_id=$CLIENT_ID" -var="client_secret=$CLIENT_SECRET" -var="tenant_id=$TENANT_ID" -var="public_key=$PUBLIC_KEY"
        working-directory: ./env/base-cluster
        continue-on-error: true

        # On push to master, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        id: apply
        # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -var="sub=$SUB" -var="client_id=$CLIENT_ID" -var="client_secret=$CLIENT_SECRET" -var="tenant_id=$TENANT_ID" -var="public_key=$PUBLIC_KEY"
        working-directory: ./env/base-cluster

        # Output Terraform apply outputs to text files and uplaod as artifacts
      - name: Upload Outputs
        id: upload
        # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          echo $(terraform output acr_name) > acr_name.txt
          echo $(terraform output aks_name) > aks_name.txt

      - name: Upload ACR Terraform Output
        # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: acr
          path: acr_name.txt

      - name: Upload AKS Terraform Output
        # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: aks
          path: aks_name.txt

  docker:
    needs: terraform
    runs-on: ubuntu-latest
    name: "Docker"

    defaults:
      run:
        shell: bash

    env:
      REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}

    steps:
      - uses: actions/checkout@v2
      - name: Download ACR Name
        uses: actions/download-artifact@v1
        with:
          name: acr

      - name: Set Variable
        run: |
          ACR=`cat acr/acr_name.txt`

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build Image
        uses: azure/docker-login@v1
        with:
          login-server: $ACR
          username: ${{ secrets.CLIENT_ID }}
          password: ${{ secrets.CLIENT_SECRET }}
      - run: |
          docker build ./spark/ -t $ACR/spark-on-aks:${{ github.sha }} -t $ACR/spark-on-aks:stable
